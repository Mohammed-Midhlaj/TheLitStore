<%- include("../../views/partials/admin/header") %>

    <head>
        <link href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css" rel="stylesheet">
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    </head>
    <style>
        .error-message {
            color: red;
        }


        .thumbnails-container {
            display: flex;
            overflow-x: auto;
        }


        .thumbnail {
            margin-right: 10px;


        }
    </style>
    <section class="content-main">
        <div class="row">
            <div class="col-9">
                <div class="content-header">
                    <h2 class="content-title">Add New Product</h2>
                </div>
            </div>
            <div class="col-lg-6">
                <div class="card mb-4">
                    <div class="card-body">
                        <form method="post" action="/admin/addProducts" enctype="multipart/form-data"
                            onsubmit="return validateForm()">
                            <div class="mb-4">
                                <label for="product_name" class="form-label">Product Name</label>
                                <input type="text" placeholder="Type here" name="productName"
                                    class="form-control border" id="product_name" maxlength="25">
                                <div id="productName-error" class="error-message"></div>
                            </div>
                            <div class="col-lg-4 mb-4">
                                <label class="form-label">Brand</label>
                                <select class="form-select border" name="brand">
                                    <%for(let i=0; i<brand.length; i++){%>

                                        <option value="<%=brand[i].brandName%>">
                                            <%=brand[i].brandName%>



                                        </option>
                                        <%}%>

                                </select>
                                <div id="brand-error" class="error-message"></div>
                            </div>
                            <div class="mb-4">
                                <label class="form-label">Full description</label>
                                <textarea placeholder="Type here" id="descriptionid" name="description"
                                    class="form-control border" rows="4"></textarea>
                                <div id="description-error" class="error-message"></div>
                            </div>
                            <div class="row">
                                <div class="col-lg-4">
                                    <div class="mb-4">
                                        <label class="form-label">Regular price</label>
                                        <input placeholder="₹" name="regularPrice" type="text"
                                            class="form-control border">
                                        <div id="regularPrice-error" class="error-message"></div>
                                    </div>
                                </div>
                                <div class="col-lg-4">
                                    <div class="mb-4">
                                        <label class="form-label">Sale price</label>
                                        <input placeholder="₹" name="salePrice" type="text" class="form-control border">

                                    </div>
                                    <div id="salePrice-error" class="error-message"></div>
                                </div>
                                <div class="col-lg-4">
                                    <div class="mb-4">
                                        <label class="form-label">Quantity</label>
                                        <input placeholder="" name="quantity" type="text" class="form-control border">
                                        <div id="quantity-error" class="error-message"></div>
                                    </div>
                                </div>
                            </div>
                            <div class="row">


                            </div>
                            <div class="card mb-4">
                                <div class="card-body">
                                    <div class="row gx-2">
                                        <div class="col-sm-6 mb-3">
                                            <label class="form-label">Category</label>
                                            <select class="form-select border" style="width: 150px;" name="category">
                                                <%for(let i=0; i<cat.length; i++){%>
                                                    <option value="<%=cat[i].name%>">
                                                        <%=cat[i].name%>
                                                    </option>
                                                <%}%>
                                            </select>
                                            <div id="category-error" class="error-message"></div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="card mb-2">
                                <div class="card-header">
                                    <h4>Choose images</h4>
                                </div>
                                <div class="card-body">
                                    <!-- Add Image Button -->
                                    <div class="mb-3">
                                        <button type="button" id="addImageBtn" class="btn btn-primary">
                                            <i class="fas fa-plus"></i> Add Image
                                        </button>
                                </div>

                                    <!-- Hidden File Input -->
                                    <input type="file" id="hiddenFileInput" accept="image/png, image/jpeg, image/jpg" style="display: none;">
                                    
                                    <!-- Images Container -->
                                    <div id="imagesContainer" class="row">
                                        <!-- Individual image sections will be added here -->
                                </div>

                                    <div id="images-error" class="error-message"></div>
                                </div>
                            </div>
                    </div>
                    <div>
                        <button class="btn btn-md rounded font-sm hover-up" type="button"
                            onclick="validateAndSubmit()">Publish</button>
                    </div>
                    </form>
                </div>
            </div>
        </div>
        </div>
    </section>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        let imageCounter = 0;
        let selectedFiles = [];

        // Initialize image handling
        document.addEventListener('DOMContentLoaded', function() {
            const addImageBtn = document.getElementById('addImageBtn');
            const hiddenFileInput = document.getElementById('hiddenFileInput');
            const imagesContainer = document.getElementById('imagesContainer');

            // Handle add image button click
            addImageBtn.addEventListener('click', function() {
                hiddenFileInput.click();
            });

            // Handle file selection
            hiddenFileInput.addEventListener('change', function(event) {
                if (event.target.files.length > 0) {
                    const file = event.target.files[0];
                    addImageSection(file);
                    hiddenFileInput.value = ''; // Reset input
                }
            });

            function addImageSection(file) {
                imageCounter++;
                const imageId = `image_${imageCounter}`;
                
                // Create image section HTML
                const imageSection = document.createElement('div');
                imageSection.className = 'col-md-6 col-lg-4 mb-4';
                imageSection.id = `section_${imageId}`;
                
                imageSection.innerHTML = `
                    <div class="card h-100">
                        <div class="card-body d-flex flex-column">
                            <h6 class="card-title mb-3">Image ${imageCounter}</h6>
                            
                            <!-- Image Preview -->
                            <div class="mb-3 flex-grow-1 d-flex align-items-center justify-content-center">
                                <img id="preview_${imageId}" src="" alt="Preview" 
                                     style="max-width: 100%; max-height: 250px; width: auto; height: auto; object-fit: contain; border: 1px solid #ddd; border-radius: 8px;">
                            </div>
                            
                            <!-- File Input -->
                            <input type="file" name="images" id="input_${imageId}" 
                                   accept="image/png, image/jpeg, image/jpg" 
                                   style="display: none;">
                            
                            <!-- Hidden input for cropped image -->
                            <input type="hidden" name="croppedImage_${imageId}" id="cropped_${imageId}">
                            
                            <!-- Buttons -->
                            <div class="d-grid gap-2">
                                <button type="button" class="btn btn-outline-primary btn-sm" onclick="selectImage('${imageId}')">
                                    <i class="fas fa-image"></i> Select Image
                                </button>
                                <button type="button" class="btn btn-outline-secondary btn-sm" onclick="cropImage('${imageId}')" id="cropBtn_${imageId}" style="display: none;">
                                    <i class="fas fa-crop"></i> Crop Image
                                </button>
                                <button type="button" class="btn btn-outline-danger btn-sm" onclick="removeImage('${imageId}')">
                                    <i class="fas fa-trash"></i> Remove
                                </button>
                            </div>
                        </div>
                    </div>
                `;
                
                imagesContainer.appendChild(imageSection);
                
                // Set the file and show preview
                const input = document.getElementById(`input_${imageId}`);
                const preview = document.getElementById(`preview_${imageId}`);
                
                const dataTransfer = new DataTransfer();
                dataTransfer.items.add(file);
                input.files = dataTransfer.files;
                
                const reader = new FileReader();
                reader.onload = function(e) {
                    preview.src = e.target.result;
                    document.getElementById(`cropBtn_${imageId}`).style.display = 'block';
                };
                reader.readAsDataURL(file);
                
                // Add to selected files array
                selectedFiles.push({
                    id: imageId,
                    file: file,
                    input: input
                });
            }
        });

        // Global functions for image operations
        function selectImage(imageId) {
            const input = document.getElementById(`input_${imageId}`);
            input.click();
            
            input.addEventListener('change', function(event) {
                if (event.target.files.length > 0) {
                    const file = event.target.files[0];
                    const preview = document.getElementById(`preview_${imageId}`);
                    
                    const reader = new FileReader();
                    reader.onload = function(e) {
                        preview.src = e.target.result;
                        document.getElementById(`cropBtn_${imageId}`).style.display = 'block';
                    };
                    reader.readAsDataURL(file);
                    
                    // Update selected files
                    const fileIndex = selectedFiles.findIndex(item => item.id === imageId);
                    if (fileIndex !== -1) {
                        selectedFiles[fileIndex].file = file;
                    }
                }
            }, { once: true });
        }

        function cropImage(imageId) {
            const preview = document.getElementById(`preview_${imageId}`);
            
            // Create modal for cropping
            const modal = document.createElement('div');
            modal.className = 'modal fade';
            modal.id = `cropModal_${imageId}`;
            modal.innerHTML = `
                <div class="modal-dialog modal-lg">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">Crop Image</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                        </div>
                        <div class="modal-body">
                            <div class="text-center">
                                <img id="cropImage_${imageId}" src="${preview.src}" style="max-width: 100%; max-height: 400px;">
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                            <button type="button" class="btn btn-primary" onclick="saveCrop('${imageId}')">Save Crop</button>
                        </div>
                    </div>
                </div>
            `;
            
            document.body.appendChild(modal);
            
            const cropModal = new bootstrap.Modal(modal);
            cropModal.show();
            
            // Initialize cropper
            const cropImg = document.getElementById(`cropImage_${imageId}`);
            const cropper = new Cropper(cropImg, {
                aspectRatio: NaN,
                viewMode: 0,
                guides: true,
                background: false,
                autoCropArea: 0.8,
                zoomable: true,
                zoomOnTouch: true,
                zoomOnWheel: true,
                cropBoxMovable: true,
                cropBoxResizable: true,
                scalable: true
            });
            
            // Store cropper instance
            window.currentCropper = cropper;
            window.currentImageId = imageId;
            
            // Clean up modal when hidden
            modal.addEventListener('hidden.bs.modal', function() {
                if (window.currentCropper) {
                    window.currentCropper.destroy();
                    window.currentCropper = null;
                }
                document.body.removeChild(modal);
            });
        }

        function saveCrop(imageId) {
            if (window.currentCropper) {
                const croppedCanvas = window.currentCropper.getCroppedCanvas();
                const croppedDataURL = croppedCanvas.toDataURL('image/jpeg', 1.0);
                
                // Update preview
                const preview = document.getElementById(`preview_${imageId}`);
                preview.src = croppedDataURL;
                
                // Convert to file and update input
                croppedCanvas.toBlob(blob => {
                    const fileName = `cropped-img-${new Date().getTime()}-${imageId}.png`;
                    const croppedFile = new File([blob], fileName, { type: 'image/png' });
                    
                    const input = document.getElementById(`input_${imageId}`);
                    const dataTransfer = new DataTransfer();
                    dataTransfer.items.add(croppedFile);
                    input.files = dataTransfer.files;
                    
                    // Update selected files
                    const fileIndex = selectedFiles.findIndex(item => item.id === imageId);
                    if (fileIndex !== -1) {
                        selectedFiles[fileIndex].file = croppedFile;
                    }
                });
                
                // Close modal
                const modal = document.getElementById(`cropModal_${imageId}`);
                const cropModal = bootstrap.Modal.getInstance(modal);
                cropModal.hide();
            }
        }

        function removeImage(imageId) {
            const section = document.getElementById(`section_${imageId}`);
            section.remove();
            
            // Remove from selected files
            const fileIndex = selectedFiles.findIndex(item => item.id === imageId);
            if (fileIndex !== -1) {
                selectedFiles.splice(fileIndex, 1);
            }
        }

        function validateAndSubmit() {
            if (validateForm()) {
                Swal.fire({
                    title: "Are you sure?",
                    text: "You are about to publish this product.",
                    icon: "warning",
                    showCancelButton: true,
                    confirmButtonText: "Yes, Publish",
                    cancelButtonText: "Cancel"
                }).then((result) => {
                    if (result.isConfirmed) {
                        document.forms[0].submit();
                    }
                });
            }
        }

        function validateForm() {
            clearErrorMessages();
            const name = document.getElementsByName('productName')[0].value;
            const description = document.getElementById('descriptionid').value;
            const brand = document.getElementsByName('brand')[0].value;
            const price = document.getElementsByName('regularPrice')[0].value;
            const saleprice = document.getElementsByName('salePrice')[0].value;
            const category = document.getElementsByName('category')[0].value;
            const quantity = document.getElementsByName('quantity')[0].value;
            let isValid = true;
            
            if (name.trim() === "") {
                displayErrorMessage('productName-error', 'Please enter a product name.');
                isValid = false;
            } else if (!/^[a-zA-Z\s\-\/]+$/.test(name.trim())) {
                displayErrorMessage('productName-error', 'Product name should contain only alphabetic characters.');
                isValid = false;
            } else if (name.trim().length > 25) {
                displayErrorMessage('productName-error', 'Product name must be at most 25 characters.');
                isValid = false;
            }

            if (description.trim() === "") {
                displayErrorMessage('description-error', 'Please enter a product description.');
                isValid = false;
            } else if (!/^[a-zA-Z0-9\s.,\-\/]+$/.test(description.trim())) {
                displayErrorMessage('description-error', 'Product description should contain only alphabetic characters.');
                isValid = false;
            }

            if (parseInt(quantity) < 0) {
                displayErrorMessage('quantity-error', 'Please enter a valid non-negative quantity.');
                isValid = false;
            }

            if (!/^[\d,]+(\.\d{1,2})?$/.test(price) || parseFloat(price.replace(/,/g, '')) < 0) {
                displayErrorMessage('regularPrice-error', 'Please enter a valid non-negative price.');
                isValid = false;
            }

            if (!/^[\d,.]+(\.\d{1,2})?$/.test(saleprice) || parseFloat(saleprice.replace(/,/g, '')) < 0) {
                displayErrorMessage('salePrice-error', 'Please enter a valid non-negative price.');
                isValid = false;
            }
            
            if (parseFloat(price) <= parseFloat(saleprice)) {
                displayErrorMessage('regularPrice-error', 'Regular price must be greater than sale price.');
                isValid = false;
            }

            if (selectedFiles.length === 0) {
                displayErrorMessage("images-error", 'Please select at least one image.');
                isValid = false;
            }
            
            return isValid;
        }

        function displayErrorMessage(elementId, message) {
            var errorElement = document.getElementById(elementId);
            errorElement.innerText = message;
            errorElement.style.display = "block";
        }

        function clearErrorMessages() {
            const errorElements = document.getElementsByClassName('error-message');
            Array.from(errorElements).forEach(element => {
                element.innerText = '';
            });
        }
    </script>

    <%- include("../../views/partials/admin/footer") %>