<%- include("../../views/partials/admin/header") %>

    <head>
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@10/dist/sweetalert2.min.css">
    </head>
    <style>
        a {
            text-decoration: none;
        }
    </style>
    <div class="content-header">
        <div>
            <h2 class="content-title card-title">Products</h2>
        </div>
    </div>
    <header class="card-header text-center mb-20">
        <form action="" method="get" class="d-inline">
            <div class="input-group input-group-sm border border-1 border-grey rounded-pill"
                style="width: 500px; margin-left: 230px;">
                <input type="text" class="form-control border-0 rounded-pill" id="searchInput" placeholder="Search products or brands"
                    name="search">
                <button class="btn  border-0" type="submit">Search</button>
                <button class="btn  border-0" type="button" onclick="clearSearch('/admin/products')">Clear</button>
            </div>
        </form>
    </header>
    <div class="right mt-5">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th scope="col"><b>Product name</b></th>
                    <th scope="col"><b>Brand</b></th>
                    <th scope="col"><b>Category</b></th>
                    <th scope="col"><b>Sale Price</b></th>
                    <th scope="col"><b>Offer</b></th>
                    <th scope="col"><b>Quantity</b></th>
                    <th scope="col"><b>Action</b></th>
                    <th scope="col"><b>Edit</b></th>
                </tr>
            </thead>
            <tbody>
                <%for(let i=data.length-1; i>=0; i--){%>
                    <tr>
                        <td>
                            <%=data[i].productName%>
                        </td>
                        <td>
                            <%=data[i].brand%>
                        </td>
                        <td>
                            <%=data[i].category.name%>
                        </td>
                        <td>
                            <%=data[i].salePrice%>
                        </td>
                        <td>
                            <%=data[i].productOffer ? data[i].productOffer + '%' : '-' %>
                        </td>
                        <td><%=data[i].quantity%></td>
                        <td>
                            <% if (data[i].isBlocked===false) { %>
                                <button class="btn btn-danger block-product" data-id="<%= data[i]._id %>" style="width: 80px;">Block</button>
                                <% } else { %>
                                    <button class="btn btn-success unblock-product" data-id="<%= data[i]._id %>" style="width: 80px;">Unblock</button>
                                    <% } %>
                            <% if (data[i].productOffer && data[i].productOffer > 0) { %>
                                <button class="btn btn-warning mt-1 remove-offer" data-id="<%=data[i]._id%>" style="width: 100px;">
                                    Remove Offer
                                </button>
                            <% } else { %>
                                <button class="btn btn-info mt-1 add-offer" data-id="<%=data[i]._id%>" style="width: 100px;">
                                    Add Offer
                                </button>
                            <% } %>
                        </td>
                        <td>
                            <a href="/admin/editProduct/<%=data[i]._id%>" class="btn btn-info text-white" style="width: 80px; text-decoration: none;">Edit</a>
                        </td>
                    </tr>
                    <%}%>
            </tbody>

        </table>
    </div>
    </div>
    </div>

    <div class="container mt-3">
        <nav aria-label="Page navigation">
            <ul class="pagination justify-content-center mb-20" style="margin-right: 200px;">


                <% for (let i=1; i <=totalPages; i++) { %>
                    <li class="page-item <%=(i === currentPage) ? 'active' : '' %>">
                        <a class="page-link" href="?page=<%= i %>">
                            <%= i %>
                        </a>
                    </li>
                    <% } %>


            </ul>
        </nav>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@10/dist/sweetalert2.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
    <script>
        function clearSearch(basePath) {
            const input = document.getElementById('searchInput');
            if (input) input.value = '';
            const url = new URL(window.location.href);
            url.searchParams.delete('search');
            url.searchParams.delete('page');
            window.location.href = basePath;
        }
        document.addEventListener('DOMContentLoaded', () => {
            document.querySelectorAll('.block-product').forEach(btn => {
                btn.addEventListener('click', async () => {
                    const id = btn.dataset.id;
                    const result = await Swal.fire({ title: 'Are you sure?', icon: 'warning', showCancelButton: true });
                    if (!result.isConfirmed) return;
                    try {
                        const res = await fetch('/admin/blockProduct?id=' + encodeURIComponent(id), { method: 'POST' });
                        const data = await res.json();
                        if (data.status) {
                            btn.classList.remove('btn-danger', 'block-product');
                            btn.classList.add('btn-success', 'unblock-product');
                            btn.textContent = 'Unblock';
                            attachHandlers(btn.closest('tr'));
                            Swal.fire('Success', 'Blocked successfully', 'success');
                        } else {
                            Swal.fire('Error', data.message || 'Failed', 'error');
                        }
                    } catch (e) { Swal.fire('Error', 'Something went wrong', 'error'); }
                });
            });
            document.querySelectorAll('.unblock-product').forEach(btn => {
                btn.addEventListener('click', async () => {
                    const id = btn.dataset.id;
                    const result = await Swal.fire({ title: 'Are you sure?', icon: 'warning', showCancelButton: true });
                    if (!result.isConfirmed) return;
                    try {
                        const res = await fetch('/admin/unblockProduct?id=' + encodeURIComponent(id), { method: 'POST' });
                        const data = await res.json();
                        if (data.status) {
                            btn.classList.remove('btn-success', 'unblock-product');
                            btn.classList.add('btn-danger', 'block-product');
                            btn.textContent = 'Block';
                            attachHandlers(btn.closest('tr'));
                            Swal.fire('Success', 'Unblocked successfully', 'success');
                        } else {
                            Swal.fire('Error', data.message || 'Failed', 'error');
                        }
                    } catch (e) { Swal.fire('Error', 'Something went wrong', 'error'); }
                });
            });
            function attachHandlers(scope) {
                const block = scope.querySelector('.block-product');
                const unblock = scope.querySelector('.unblock-product');
                if (block && !block._bound) { block._bound = true; block.click(); block._bound = false; }
                if (unblock && !unblock._bound) { unblock._bound = true; unblock.click(); unblock._bound = false; }
            }
        });

        function addOfferModal(productId) {
            Swal.fire({
                title: 'Add Offer',
                input: 'number',
                inputLabel: 'Enter offer percentage (0-100)',
                inputAttributes: {
                    min: 0,
                    max: 100,
                    step: 1
                },
                showCancelButton: true,
                confirmButtonText: 'Add',
                preConfirm: (percentage) => {
                    if (percentage === '' || percentage < 0 || percentage > 100) {
                        Swal.showValidationMessage('Please enter a valid percentage (0-100)');
                    }
                    return percentage;
                }
            }).then(async (result) => {
                if (!result.isConfirmed) return;
                try {
                    const res = await fetch('/admin/addProductOffer', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ productId: productId, percentage: result.value })
                    });
                    const data = await res.json();
                    if (data.status) {
                        // Update the row inline
                        const row = document.querySelector(`[data-id-row="${productId}"]`) || document.querySelector(`[data-id="${productId}"]`).closest('tr');
                        if (row) {
                            const offerCell = row.children[4];
                            offerCell.textContent = `${result.value}%`;
                            const btn = row.querySelector('.add-offer');
                            if (btn) {
                                btn.classList.remove('btn-info', 'add-offer');
                                btn.classList.add('btn-warning', 'remove-offer');
                                btn.textContent = 'Remove Offer';
                            }
                        }
                        Swal.fire('Success', data.message, 'success');
                    } else {
                        Swal.fire('Error', data.message || 'Failed', 'error');
                    }
                } catch (e) { Swal.fire('Error', 'Server error', 'error'); }
            });
        }

        async function removeOffer(productId) {
            const result = await Swal.fire({
                title: 'Remove Offer',
                text: 'Are you sure you want to remove the offer for this product?',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonText: 'Yes, remove it!'
            });
            if (!result.isConfirmed) return;
            try {
                const res = await fetch('/admin/removeProductOffer', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ productId })
                });
                const data = await res.json();
                if (data.status) {
                    const row = document.querySelector(`[data-id-row="${productId}"]`) || document.querySelector(`[data-id="${productId}"]`).closest('tr');
                    if (row) {
                        const offerCell = row.children[4];
                        offerCell.textContent = '-';
                        const priceCell = row.children[3];
                        if (data.salePrice !== undefined) { priceCell.textContent = data.salePrice; }
                        const btn = row.querySelector('.remove-offer');
                        if (btn) {
                            btn.classList.remove('btn-warning', 'remove-offer');
                            btn.classList.add('btn-info', 'add-offer');
                            btn.textContent = 'Add Offer';
                        }
                    }
                    Swal.fire('Success', data.message, 'success');
                } else {
                    Swal.fire('Error', data.message || 'Failed', 'error');
                }
            } catch (e) { Swal.fire('Error', 'Server error', 'error'); }
        }

        // Bind dynamic buttons
        document.addEventListener('click', (e) => {
            if (e.target.classList.contains('add-offer')) {
                const id = e.target.dataset.id;
                addOfferModal(id);
            } else if (e.target.classList.contains('remove-offer')) {
                const id = e.target.dataset.id;
                removeOffer(id);
            }
        });
    </script>

    <%- include("../../views/partials/admin/footer") %>